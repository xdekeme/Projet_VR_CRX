#version 330 core
layout (location = 0) in vec3 position; 
layout (location = 1) in vec2 tex_coord; 
layout (location = 2) in vec3 normal; 
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

out VS_OUT {
    mat3 TBN;
    vec3 v_frag_coord; 
    vec2 v_tex_coords;
    vec4 FragPosLightSpace;
    vec4 FragPosLightSpace2;
} vs_out;

uniform mat4 M; 
uniform mat4 V; 
uniform mat4 P; 
uniform mat4 lightSpaceMatrix;
uniform mat4 lightSpaceMatrix2;

void main() { 
    mat3 normalMatrix = transpose(inverse(mat3(M)));
    vec3 T = normalize(normalMatrix * aTangent);
    vec3 N = normalize(normalMatrix * normal);
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
    vs_out.TBN = transpose(mat3(T, B, N)); 

    vec4 frag_coord = vec4(position, 1.0);
    vs_out.v_frag_coord = frag_coord.xyz;
    vs_out.v_tex_coords = - tex_coord;

    gl_Position = P * V * M * frag_coord;
    vs_out.FragPosLightSpace = lightSpaceMatrix * M * frag_coord;
    vs_out.FragPosLightSpace2 = lightSpaceMatrix2 * M * frag_coord;
}




