#version 430 core

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Particle {
    vec4 position;
    vec4 color;
};

layout(std430, binding = 0) buffer particuleBuffer {
    Particle particles[];
};

uniform int numParticles;
uniform float time;

float hash(float n) { return fract(sin(n) * 43758.5453); }

vec3 hsb2rgb(vec3 c){
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0);
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix(vec3(1.0), rgb, c.y);
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id < numParticles) {
        float theta = hash(id + time) * 6.28318530718;
        float phi = hash(id + time + 1234.0) * 3.14159265359; 
        float radius = 1.0; // Rayon de la sphÃ¨re

        float x = radius * sin(phi) * cos(theta);
        float y = radius * sin(phi) * sin(theta);
        float z = radius * cos(phi);

        float hue = theta / 6.28318530718;
        hue = mix(0.55, 0.75, hue); 
        float saturation = 0.6 + hash(id * 13.0) * 0.4;
        float brightness = 0.5 + hash(time * 7.0 + id) * 0.5;
        vec3 color = hsb2rgb(vec3(hue, saturation, brightness));

        particles[id].position = vec4(x, y, z, 1.0);
        particles[id].color = vec4(color, 1.0);
    }
}