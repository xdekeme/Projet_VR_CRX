#version 330 core

in VS_OUT {
    mat3 TBN;
    vec3 v_frag_coord; 
    vec2 v_tex_coords;
    vec4 FragPosLightSpace; 
    vec4 FragPosLightSpace2; 
} fs_in;

out vec4 FragColor;

struct Light{
    vec3 light_pos; 
    float ambient_strength; 
    float diffuse_strength; 
    float specular_strength; 

    float constant;
    float linear;
    float quadratic;
};

uniform Light light;
uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform sampler2D shadowMap;
uniform sampler2D shadowMap2;
uniform float shininess; 
uniform vec3 materialColour; 
uniform vec3 u_view_pos;

precision mediump float;

float ShadowCalculation(vec4 fragPosLightSpace, sampler2D shadowMap){
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    float currentDepth = projCoords.z;
    float bias = 0.005; 
    

    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    return shadow;
}

float specularCalculation(vec3 TangentViewPos, vec3 TangentFragPos, vec3 normal, vec3 lightDir){
    vec3 viewDir = normalize(TangentViewPos - TangentFragPos);
    vec3 R = reflect (-lightDir,normal); 
    float cosTheta = dot(R , viewDir);
    float spec = pow(max(cosTheta,0.0), 32.0); 
    return light.specular_strength * spec;
}

void main() {
    vec3 TangentLightPos = fs_in.TBN * light.light_pos;
    vec3 TangentViewPos  = fs_in.TBN * u_view_pos;
    vec3 TangentFragPos  = fs_in.TBN * fs_in.v_frag_coord;

    vec3 normal = texture(normalMap, fs_in.v_tex_coords).rgb;
    normal = normalize(normal * 2.0 - 1.0);

    vec3 color = texture(diffuseMap, fs_in.v_tex_coords).rgb;

    vec3 lightDir = normalize(TangentLightPos - TangentFragPos);

    float shadow = ShadowCalculation(fs_in.FragPosLightSpace, shadowMap);
    float shadow2 = ShadowCalculation(fs_in.FragPosLightSpace2, shadowMap2);
    float specular = specularCalculation(TangentViewPos,TangentFragPos, normal, lightDir);
    float diffuse = light.diffuse_strength * max(dot(normal,lightDir),0.0);
    float distance = length(light.light_pos - fs_in.v_frag_coord);
    float attenuation = 1 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
    float light = light.ambient_strength + ((1.0 - shadow2)+(1.0 - shadow))*0.5 * attenuation * (diffuse + specular); 
    vec3 finalColor = color * light; 
    FragColor = vec4(finalColor, 1.0);
} 